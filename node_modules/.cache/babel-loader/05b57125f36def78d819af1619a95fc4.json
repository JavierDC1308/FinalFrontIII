{"ast":null,"code":"/* export const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_REQUEST':\r\n            return {users: [...state.users, action.payload]}\r\n        default: \r\n            throw new Error()\r\n    }\r\n  } */\n// Este es un reducer que toma dos argumentos: state (estado actual) y action (acción a realizar)\nexport const reducer = (state, action) => {\n  // Aquí comienza una estructura de control switch basada en el tipo de acción proporcionada\n  switch (action.type) {\n    case 'ADD_REQUEST':\n      // Cuando el tipo de acción es 'ADD_REQUEST', se realiza lo siguiente:\n      // - Se crea un nuevo objeto de estado con una propiedad 'users' que contiene\n      //   una copia del arreglo 'state.users' y se agrega 'action.payload' al final del arreglo.\n      return {\n        users: [...state.users, action.payload]\n      };\n\n    default:\n      // Si el tipo de acción no coincide con ningún caso, se lanza un error.\n      // Esto es útil para detectar acciones desconocidas o no manejadas.\n      throw new Error('Tipo de acción desconocido');\n  }\n};","map":{"version":3,"names":["reducer","state","action","type","users","payload","Error"],"sources":["C:/Users/PowerM2/Desktop/Digital House/Examen/14. Front End III/FinalFrontIII/src/Components/userListReducer.js"],"sourcesContent":["/* export const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_REQUEST':\r\n            return {users: [...state.users, action.payload]}\r\n        default: \r\n            throw new Error()\r\n    }\r\n  } */\r\n\r\n\r\n  // Este es un reducer que toma dos argumentos: state (estado actual) y action (acción a realizar)\r\nexport const reducer = (state, action) => {\r\n    // Aquí comienza una estructura de control switch basada en el tipo de acción proporcionada\r\n    switch (action.type) {\r\n        case 'ADD_REQUEST':\r\n            // Cuando el tipo de acción es 'ADD_REQUEST', se realiza lo siguiente:\r\n            // - Se crea un nuevo objeto de estado con una propiedad 'users' que contiene\r\n            //   una copia del arreglo 'state.users' y se agrega 'action.payload' al final del arreglo.\r\n            return { users: [...state.users, action.payload] };\r\n\r\n        default:\r\n            // Si el tipo de acción no coincide con ningún caso, se lanza un error.\r\n            // Esto es útil para detectar acciones desconocidas o no manejadas.\r\n            throw new Error('Tipo de acción desconocido');\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGE;AACF,OAAO,MAAMA,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACtC;EACA,QAAQA,MAAM,CAACC,IAAf;IACI,KAAK,aAAL;MACI;MACA;MACA;MACA,OAAO;QAAEC,KAAK,EAAE,CAAC,GAAGH,KAAK,CAACG,KAAV,EAAiBF,MAAM,CAACG,OAAxB;MAAT,CAAP;;IAEJ;MACI;MACA;MACA,MAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;EAVR;AAYH,CAdM"},"metadata":{},"sourceType":"module"}